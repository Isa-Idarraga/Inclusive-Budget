# Generated by Django - Migración de datos RF17B

from django.db import migrations


def asignar_etapa_por_defecto(apps, schema_editor):
    """
    Asigna la etapa 'Sin categorizar' a todos los consumos existentes
    que no tengan etapa asignada (RF17B - Criterio 5)
    """
    BudgetSection = apps.get_model('projects', 'BudgetSection')
    ConsumoMaterial = apps.get_model('projects', 'ConsumoMaterial')
    
    # Paso 1: Crear o obtener la sección "Sin categorizar"
    sin_categorizar, created = BudgetSection.objects.get_or_create(
        order=0,  # Order 0 para que aparezca primero
        defaults={
            'name': 'Sin categorizar',
            'description': 'Consumos registrados antes de la implementación de etapas del presupuesto (RF17B)',
            'is_percentage': False,
            'percentage_value': 0
        }
    )
    
    if created:
        print(f"✅ Creada sección 'Sin categorizar' con ID: {sin_categorizar.id}")
    else:
        print(f"ℹ️ Sección 'Sin categorizar' ya existía con ID: {sin_categorizar.id}")
    
    # Paso 2: Contar consumos sin etapa
    consumos_sin_etapa = ConsumoMaterial.objects.filter(etapa_presupuesto__isnull=True)
    total = consumos_sin_etapa.count()
    
    if total > 0:
        # Paso 3: Asignar la etapa a esos consumos
        consumos_sin_etapa.update(etapa_presupuesto=sin_categorizar)
        print(f"✅ Asignada etapa 'Sin categorizar' a {total} consumos existentes")
    else:
        print("ℹ️ No hay consumos sin etapa para actualizar")


def revertir_asignacion(apps, schema_editor):
    """
    Función para revertir la migración si es necesario
    """
    BudgetSection = apps.get_model('projects', 'BudgetSection')
    ConsumoMaterial = apps.get_model('projects', 'ConsumoMaterial')
    
    try:
        sin_categorizar = BudgetSection.objects.get(order=0, name='Sin categorizar')
        # Volver a poner NULL en los consumos que tenían esta etapa
        ConsumoMaterial.objects.filter(etapa_presupuesto=sin_categorizar).update(
            etapa_presupuesto=None
        )
        print("⏪ Revertida asignación de etapa por defecto")
    except BudgetSection.DoesNotExist:
        print("ℹ️ No se encontró la sección 'Sin categorizar'")


class Migration(migrations.Migration):

    dependencies = [
        ('projects', '0016_consumomaterial_etapa_presupuesto'),  # Asegúrate que este sea el número correcto
    ]

    operations = [
        migrations.RunPython(asignar_etapa_por_defecto, revertir_asignacion),
    ]